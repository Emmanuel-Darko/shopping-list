{"version":3,"sources":["reducers/itemReducer.js","actions/constants.js","reducers/index.js","store.js","components/AppNavbar.js","actions/itemActions.js","components/ShoppingList.js","components/itemModal.js","App.js","serviceWorker.js","index.js"],"names":["initialState","items","loading","itemReducer","state","action","console","log","payload","type","filter","item","_id","combineReducers","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","AppNavbar","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","ShoppingList","onDeleteItem","id","props","deleteItem","getItems","ListGroup","TransitionGroup","map","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","connect","dispatch","axios","get","then","res","data","delete","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","placeholder","marginTop","block","post","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b5d0a7bc.chunk.js","sourcesContent":["import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from '../actions/constants';\r\n\r\nconst initialState = {\r\n    items: [],\r\n    loading: false\r\n}\r\n\r\nconst itemReducer = (state=initialState, action={})  => {\r\n    console.log(action.payload)\r\n    switch(action.type){\r\n        case GET_ITEMS:\r\n            return {\r\n                ...state,\r\n                items: action.payload,\r\n                loading: false // set loading to false after loading\r\n            }\r\n\r\n        case ADD_ITEM:\r\n            return{\r\n                ...state,\r\n                items: [action.payload, ...state.items]\r\n        }\r\n        \r\n        case DELETE_ITEM:\r\n            return{\r\n                ...state,\r\n                items: state.items.filter((item) => item._id !== action.payload)\r\n            }\r\n\r\n\r\n        case ITEMS_LOADING:\r\n            return{\r\n                ...state,\r\n                loading: true\r\n            }\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default itemReducer;","export const GET_ITEMS = 'GET_ITEMS';\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const DELETE_ITEM = 'DELETE_ITEM';\r\nexport const ITEMS_LOADING = 'ITEMS_LOADING';\r\n","import { combineReducers } from 'redux';\r\nimport itemReducer from './itemReducer';\r\n\r\nexport default combineReducers({\r\n    item: itemReducer\r\n})","import {createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {}\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;","import React,{Component} from 'react';\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    Container,\r\n    NavbarBrand\r\n} from 'reactstrap';\r\n\r\nclass AppNavbar extends Component {\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            isOpen: !this.state.isOpen\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n                    <Container>\r\n                        <NavbarBrand href=\"/\">ShoppingList</NavbarBrand>\r\n                        <NavbarToggler onClick={this.toggle}/>\r\n                        <Collapse isOpen={this.state.isOpen} navbar>\r\n                            <Nav className=\"ml-auto\" navbar>\r\n                                <NavItem>\r\n                                    <NavLink href=\"https://github.com\">\r\n                                        Github\r\n                                    </NavLink>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default AppNavbar;","import { GET_ITEMS, ADD_ITEM, DELETE_ITEM, ITEMS_LOADING} from './constants';\r\nimport axios from 'axios';\r\n\r\nexport const getItems = () => dispatch => {\r\n    // set items loading\r\n    dispatch(setItemsLoading());\r\n\r\n    // fetch items\r\n    axios.get('/api/items')\r\n    .then(res => dispatch({\r\n        type: GET_ITEMS,\r\n        payload: res.data\r\n    }))\r\n\r\n    // fetch items\r\n    // fetch('/api/items')\r\n    // .then(data => data.json())\r\n    // .then(res => dispatch({\r\n    //     type: GET_ITEMS,\r\n    //     payload: res\r\n    // }))\r\n}\r\n\r\nexport const addItem = item => dispatch => {\r\n    axios.post('/api/items',item)\r\n    .then(res => dispatch({\r\n        type: ADD_ITEM,\r\n        payload: res.data\r\n    }))\r\n}\r\n\r\nexport const deleteItem = id => dispatch => {\r\n    axios.delete(`/api/items/${id}`)\r\n    .then(res => dispatch({\r\n        type: DELETE_ITEM,\r\n        payload: id\r\n    }))\r\n}\r\n\r\n\r\nexport const setItemsLoading = () => ({\r\n    type: ITEMS_LOADING\r\n})","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Container, ListGroup, ListGroupItem, Button } from 'reactstrap';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types'\r\nimport { getItems, deleteItem } from '../actions/itemActions';\r\n\r\nclass ShoppingList extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.getItems()\r\n    }\r\n\r\n    onDeleteItem = (id) => {\r\n        this.props.deleteItem(id);\r\n    }\r\n\r\n    render(){\r\n        const { items } = this.props;\r\n        return(\r\n            <Container>\r\n                <ListGroup>\r\n                    <TransitionGroup className='shopping-list'>\r\n                        {items.map(({_id, name}) => (\r\n                            <CSSTransition key={_id} timeout={400} classNames='fade'>\r\n                                <ListGroupItem>\r\n                                    <Button\r\n                                        className='remove-btn'\r\n                                        color='danger'\r\n                                        size='sm'\r\n                                        onClick={()=>{\r\n                                            this.onDeleteItem(_id)\r\n                                        }}\r\n                                    >\r\n                                        &times;\r\n                                    </Button>\r\n                                    {name}\r\n                                </ListGroupItem>\r\n                            </CSSTransition>\r\n                        ))}\r\n                    </TransitionGroup>\r\n                </ListGroup>\r\n            </Container>\r\n        )\r\n    }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n    items: PropTypes.array.isRequired,\r\n    getItems: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    items: state.item.items // 'state.item' because item reducer was classified as item in the root reducer file.\r\n})\r\n\r\n// const mapDispatchToProps = (dispatch) => ({\r\n//     getItems: () => dispatch(getItems())\r\n// })\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    { getItems, deleteItem }\r\n)(ShoppingList)","import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    Form,\r\n    FormGroup,\r\n    Label,\r\n    Input\r\n} from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\n// import { v4 as uuid} from 'uuid';\r\nimport { addItem } from '../actions/itemActions';\r\n\r\nclass ItemModal extends Component {\r\n    state = { \r\n        modal: false,\r\n        name: ''\r\n    }\r\n\r\n    toggle = () => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n        // console.log(this.state.name)\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newItem = {\r\n            // id: uuid(),\r\n            name: this.state.name\r\n        }\r\n        \r\n        // Add item via add_item action\r\n        this.props.addItem(newItem);\r\n\r\n        // close modal\r\n        this.toggle()\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Button\r\n                    color=\"dark\"\r\n                    style={{marginBottom: '2rem'}}\r\n                    onClick={this.toggle}\r\n                >\r\n                    Add Item\r\n                </Button>\r\n\r\n                <Modal\r\n                    isOpen={this.state.modal}\r\n                    toggle={this.toggle}\r\n                >\r\n                    <ModalHeader toggle={this.toggle}>Add To Shopping List</ModalHeader>\r\n                    <ModalBody>\r\n                        <Form onSubmit={this.onSubmit}>\r\n                            <FormGroup>\r\n                                <Label for=\"item\">Item</Label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                    id=\"item\"\r\n                                    placeholder=\"Add shopping Item\"\r\n                                    onChange ={this.onChange}\r\n                                />\r\n                                <Button\r\n                                    color = \"dark\"\r\n                                    style = {{marginTop: '2rem'}}\r\n                                    block\r\n                                >\r\n                                    Add Item\r\n                                </Button>\r\n                            </FormGroup>\r\n                        </Form>\r\n                    </ModalBody>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    items: state.item.items\r\n})\r\n\r\nexport default connect(mapStateToProps,{ addItem })(ItemModal);","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { Container } from 'reactstrap';\nimport store from './store';\n\nimport AppNavbar from './components/AppNavbar';\nimport ShoppingList from './components/ShoppingList';\nimport ItemModal from './components/itemModal';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}